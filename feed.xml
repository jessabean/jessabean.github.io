<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Jessica Eldredge</title>
		<description>Web designer/developer, sketchnoter, word nerd</description>
		<link>http://jessica-eldredge.com</link>
		<atom:link href="http://jessica-eldredge.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Submitting My First Talk Proposal</title>
				<description>&lt;p&gt;I’ve had the privilege of working with some fantastic people over the course of my career; people who are good at their respective crafts, and who are good at sharing their skills with the public through their writing and public speaking.&lt;/p&gt;

&lt;p&gt;I too have felt an itch to share my knowledge with others, and have hesitated for numerous reasons, including but not limited to: I don’t know what to say, I don’t know how to say it, I’m not experienced enough, and &lt;em&gt;I’m just plain scared&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After conversing with some aforementioned fantastic people last year about the benefits that being a recognized speaker brings to one’s career, the itch got stronger. I decided that in 2014, I’d push all the silly excuses aside and give public speaking a shot. To my excitement, my first talk proposal about techniques for sketchnoting technical content has been accepted to two conferences year! I wanted to share my experience crafting and submitting a proposal.&lt;/p&gt;

&lt;h2&gt;Step 1: What to Talk About&lt;/h2&gt;

&lt;p&gt;The very hardest part of the process, the part that has the potential to stop everything in its tracks, is deciding what to talk about. I started by asking myself some questions: What am I good at? What can I teach people about? What do I think people would be interested in learning about?&lt;/p&gt;

&lt;p&gt;I’m a front end developer, so these questions took me on a meandering path through various ideas about CSS and user experience and structuring app assets, but to be honest, I just couldn’t get excited about any of them. Like I said, this step almost stopped everything in its tracks.&lt;/p&gt;

&lt;p&gt;So I asked myself again why I wanted to speak at all. One of the reasons was pretty simple: some people I knew had encouraged me to. Even more, they’d encouraged me to speak on a specific subject.&lt;/p&gt;

&lt;p&gt;Whenever I go to a conference, I like to practice &lt;a href=&quot;http://sketchnotearmy.com/about/&quot;&gt;sketchnoting&lt;/a&gt;. It turns out to be a great conversation starter—people like looking at them and asking me questions. I get so many questions, in fact, that it occurred to me that I could answer these questions in a public space.&lt;/p&gt;

&lt;p&gt;While walking home one day from work, I spent 30 minutes having a mental conversation with myself about how to sketchnote. By the end of my walk, I was totally pumped; way more pumped that I was about any of the other ideas I’d been kicking around before. I realized I could &lt;em&gt;really&lt;/em&gt; talk about this…and, just like that, I had a topic.&lt;/p&gt;

&lt;h2&gt;Step 2: Writing the Proposal&lt;/h2&gt;

&lt;p&gt;There have been &lt;a href=&quot;http://www.noelrappin.com/railsrx/2014/3/17/what-i-learned-from-reading-429-conference-proposals&quot;&gt;a lot&lt;/a&gt; of &lt;a href=&quot;http://www.sarahmei.com/blog/2014/04/07/what-your-conference-proposal-is-missing/&quot;&gt;great posts&lt;/a&gt; about &lt;a href=&quot;http://blog.testdouble.com/posts/2014-04-04-crafting-a-conference-talk.html&quot;&gt;writing&lt;/a&gt; effective &lt;a href=&quot;http://jumpstartlab.com/news/archives/2013/08/30/submitting-conference-proposals&quot;&gt;proposals&lt;/a&gt;. I won’t rehash any of that here—you should read them!&lt;/p&gt;

&lt;p&gt;I was fortunate to have some great coaching from more experienced friends about how to write my proposal. In some cases I didn’t even have to ask; they reached out to me! I’m grateful for the advice I received and I think it really helped me feel more confident when crafting and submitting my talk.&lt;/p&gt;

&lt;p&gt;Writing the abstract actually turned out to be easier for me than I anticipated. I imagined meeting someone in the hallway track at a conference and being told: “I really like your sketchnotes! I wish I knew how do that!” While composing the abstract, I asked myself: “How would I reply to this person?”&lt;/p&gt;

&lt;p&gt;The best advice I got was how to approach the detailed description in a CFP (call for proposals). Being completely new to the proposal process, I wasn’t aware what additional information I should provide to the reviewers. One of my mentors advised:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Good talks should have a purpose. What is it? Many
organizers want to see that. You don&amp;#39;t want that in your abstract as that&amp;#39;s the punchline that they have to show up to hear.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that in mind, I tried to keep a few details to myself, but also communicate my excitement about the subject matter. I started with what inspired me to give the talk in the first place, and how I thought my ideas would help attendees.&lt;/p&gt;

&lt;p&gt;A friend also suggested creating an outline of my talk, which I included in the notes to the organizers. I think this helped communicate that I’d thought about the content of my talk beyond a one-paragraph abstract. It also saved me some time later—I then had a skeleton of a talk to start filling in when creating my slides. Perhaps my submission was a bit of overkill, but I don’t regret spending the time to lay out my ideas.&lt;/p&gt;

&lt;p&gt;You can see my original proposal here: &lt;a href=&quot;https://gist.github.com/jessabean/f037a962c751b1d8fca6&quot;&gt;https://gist.github.com/jessabean/f037a962c751b1d8fca6&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 3: Deciding Where to Submit&lt;/h2&gt;

&lt;p&gt;I knew that I wanted to deliver my talk to developers, so when deciding &lt;em&gt;where&lt;/em&gt; to submit my talk, I looked for technical conferences. Seeing as how I feel embraced by the Ruby on Rails community, and am familiar with some of its conferences, I decided to start with some Ruby conferences.&lt;/p&gt;

&lt;p&gt;The very first conference I submitted to was &lt;a href=&quot;http://2014.scottishrubyconference.com/&quot;&gt;Scottish Ruby Conf&lt;/a&gt;. I happen to know the conference organizers and that they are committed to creating a diverse and fun program every year. It’s a conference I’ve enjoyed as an attendee in the past and wanted to go back to. I also submitted to &lt;a href=&quot;http://railsconf.com/&quot;&gt;RailsConf&lt;/a&gt;, which is HUGE and terrifying, but also so much fun and well-attended by many amazing people. Again, I knew that the organizers are always looking for something new and fresh, and I have seen some great design-oriented talks there in the past, so I felt like my talk would fit in.&lt;/p&gt;

&lt;p&gt;To my delight, my talk has been accepted to these two conferences! I feel very honored and humbled by this. So many talented people applied for a limited number of speaker slots. I hope I can deliver a talk that will be worth my valuable place on the schedule.&lt;/p&gt;

&lt;p&gt;I can count on one hand the number of conferences I’ve submitted to so far, and I feel fortunate to have been accepted to two of them. During this process, I’ve specifically sought out conferences that not only provide great content, but also a welcoming space for attendees and speakers. I also had in mind conferences that embrace first-time speakers. I’m a total n00b, so if I’m going to speak, I’d rather it be somewhere with a supportive organizing committee that puts as much thought into the people of their conference as the content.&lt;/p&gt;

&lt;p&gt;Some people advise submitting everywhere to increase the odds of getting accepted. I feel more comfortable with my targeted approach; it may mean I submit to and potentially speak at less conferences, but at least I know if I do get accepted, the conference is totally worth the time and effort to travel.&lt;/p&gt;

&lt;h2&gt;Step 4: Putting the Talk Together&lt;/h2&gt;

&lt;p&gt;I started working on my slides about about 2 months before RailsConf. Thankfully I had my outline from my CFP to start from. I used the &lt;a href=&quot;http://writer.pro/&quot;&gt;Writer Pro&lt;/a&gt; app to start adding additional bullet points to each section of my outline, figuring these points would end up as my speaker’s notes in the final presentation.&lt;/p&gt;

&lt;p&gt;Because I’ve been inspired by others’ sketchnotes for a long time, it was fun and relatively easy to find examples to include in my slides. I spent a weekend perusing the internet and saving images to a folder where I kept all the assets for my slides.&lt;/p&gt;

&lt;p&gt;I tried to follow a lot of the guidance that Zach Holman provides on &lt;a href=&quot;http://speaking.io/&quot;&gt;Speaking.io&lt;/a&gt;, especially the section on typography. My slides are set in PT Sans, an extremely legible sans-serif typeface. It’s often used in signage, which is great because I wanted to ensure that users could see my slides from far away.&lt;/p&gt;

&lt;p&gt;At first, I followed my original outline explicitly; I needed to just get content onto slides. Then I moved things around as I determined a better flow for my talk. My final presentation is slightly different than the outline I submitted. I don’t have an explicit story arc, as many speakers have advised, but I think my talk follows the sketchnoting thought process pretty well.&lt;/p&gt;

&lt;h2&gt;Step 5: Profit?&lt;/h2&gt;

&lt;p&gt;At this point, I still haven’t actually delivered my talk to a conference audience. I’ve had many panicky moments over the last month as I struggled to put together my slides and questioned whether I can actually stand up on a stage and say words without throwing up.&lt;/p&gt;

&lt;p&gt;The good news is, I was able to deliver a practice talk to the engineering team at Shopify…and I didn’t throw up!&lt;/p&gt;

&lt;p&gt;Avdi Grimm recently wrote about giving yourself &lt;a href=&quot;http://devblog.avdi.org/2014/04/08/how-to-suck-at-conference-talks/&quot;&gt;permission to suck&lt;/a&gt;. I think that’s really good advice. At this point, there are a few too many “ums” in my delivery, and the stories aren’t as funny or as exciting as I imagined them to be in my head. But I’m okay with it…my technique will get better over time.&lt;/p&gt;

&lt;p&gt;It’s simultaneously terrifying and exciting to hear people tell me they are looking forward to my talk. I hope I can deliver!&lt;/p&gt;
</description>
				<pubDate>Thu, 17 Apr 2014 00:00:00 -0400</pubDate>
				<link>http://jessica-eldredge.com//2014/04/17/submitting-my-first-talk-proposal/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/04/17/submitting-my-first-talk-proposal/</guid>
			</item>
		
			<item>
				<title>Custom Playlist Art on Rdio</title>
				<description>&lt;p&gt;A really nice feature of the music subscription service &lt;a href=&quot;http://rdio.com&quot;&gt;Rdio&lt;/a&gt; is the ability to create custom artwork for playlists. It&amp;#39;s a fun opportunity for people to personalize their music sharing experience.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;post-img&quot; src=&quot;/img/assets/2014-02-17/rdio-covers.jpg&quot;&gt;
&lt;figcaption&gt;Rdio artwork by &lt;a href=&quot;http://dribbble.com/brentonlittle&quot;&gt;brentonlittle&lt;/a&gt;, &lt;a href=&quot;http://dribbble.com/talbs&quot;&gt;talbs&lt;/a&gt;, &amp;amp; &lt;a href=&quot;http://dribbble.com/markerarts&quot;&gt;markerarts&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;My pal Brian Talbot shared &lt;a href=&quot;http://dribbble.com/shots/1361176-Rdio-Playlist-Art-2013-Favorites?list=users&quot;&gt;a year of Rdio playlists&lt;/a&gt; on Dribbble, and it inspired me to plan out my 2014 playlist art. I started by planning a color palette for each month, inspired mostly by jewel tones and the &lt;a href=&quot;http://www.pantone.com/coloroftheyear&quot;&gt;Pantone Colors of the Year&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;post-img&quot; src=&quot;/img/assets/2014-02-17/rdio-colors.jpg&quot;&gt;
&lt;figcaption&gt;My 2014 Rdio playlist color palette (work in progress)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Then I dusted off Adobe Illustrator and tried my hand at designing something light-hearted and fun. I came up with an old-fashioned radio with chunky bold lines and the best part: RAINBOWS!!! Because that&amp;#39;s what music is all about, of course.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/img/assets/2014-02-17/rdio-january.jpg&quot;&gt;
  &lt;figcaption&gt;My design for January&#39;s playlist art (Typeface: Archer)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To customize your own playlists, find or create an image at least 200px by 200px in size. On your playlist page, hover over the collage of album covers by the playlist title. Click on the pencil icon to edit.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;post-img&quot; src=&quot;/img/assets/2014-02-17/update-cover-art-2.jpg&quot;&gt;
&lt;figcaption&gt;Upload a new image to customize your artwork&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When the Edit Playlist Artwork modal appears, upload a new image for your playlist, hit the Save button, and enjoy rocking out with a more personalized playlist.&lt;/p&gt;
</description>
				<pubDate>Mon, 17 Feb 2014 00:00:00 -0500</pubDate>
				<link>http://jessica-eldredge.com//2014/02/17/rdio-playlist-art/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/02/17/rdio-playlist-art/</guid>
			</item>
		
			<item>
				<title>Create Headings with Lines in CSS</title>
				<description>&lt;p&gt;A popular web design pattern is to include horizontal lines on either side of a line of text, often in a heading. An example of this style is the subheading treatment in Spotify&amp;#39;s &lt;a href=&quot;https://www.spotify.com/us/2013/&quot;&gt;Year in Review&lt;/a&gt;:
&lt;img class=&quot;post-img&quot; src=&quot;/img/assets/2014-01-26/spotify-heading.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;There are many different ways to accomplish this via CSS. Many &lt;a href=&quot;http://css-tricks.com/line-on-sides-headers/&quot;&gt;people&lt;/a&gt; before me have &lt;a href=&quot;http://www.impressivewebs.com/centered-heading-horizontal-line/&quot;&gt;collected examples&lt;/a&gt; for this very issue, but I figured one more couldn&amp;rsquo;t hurt.&lt;/p&gt;

&lt;p&gt;For the purposes of this demonstration, I&amp;rsquo;ve left off the vendor prefixes.&lt;/p&gt;

&lt;h2&gt;1: Pseudo-Elements with Nested Span&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;span&amp;gt;Title&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;h1 {
  position: relative;
  text-align: center;
}

h1 span {
  background: #fff;
  padding: 0 15px;
  position: relative;
  z-index: 1;
}

h1:before {
  background: #ddd;
  content: &quot;&quot;;
  display: block;
  height: 1px;
  position: absolute;
    top: 50%;
  width: 100%;
}

h1:before {
  left: 0;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/daRch/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method uses a pseudo-element to place a 1px high line before the heading. The line takes up 100% of its container. The span then uses a background color and some padding to sit on top of the line, so it &lt;em&gt;looks&lt;/em&gt; like there are two lines on either side of the heading.&lt;/p&gt;

&lt;h2&gt;2: Inline Block Heading with Container&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  display: inline-block;
  padding: 0 15px;
  position: relative;
}

h1:before,
h1:after {
  background: #ddd;
  content: &quot;&quot;;
  display: block;
  height: 1px;
  position: absolute;
    top: 50%;
  width: 400%;
}

h1:before {
  right: 100%;
}

h1:after {
  left: 100%;
}

.container {
  overflow: hidden;
  text-align: center;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/22gHG/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method is similar to #1, with a few small differences. The heading has been set to &lt;code&gt;display: inline-block&lt;/code&gt;, which means it won&amp;rsquo;t take up 100% of its container. That in turn means the pseudo-elements being used for the lines need to be longer if you want them to stretch across the page. I&amp;rsquo;ve used an arbitrary 400% here, but that width would likely need to be adjusted for various container sizes. Lastly, this method assumes you don&amp;rsquo;t mind setting &lt;code&gt;overflow: hidden&lt;/code&gt; on a container around the headings.&lt;/p&gt;

&lt;p&gt;Bonus: This method will work on headings with multiple lines of text.&lt;/p&gt;

&lt;h2&gt;3: Nested Span and Gradient&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;span&amp;gt;Title&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;
h1 {
  background: linear-gradient(top, #fff 0%, #fff 50%, #ddd 50%, #ddd 50.5%, #fff 50.5%, #fff 100%);
}

h1 span {
  background: #fff;
  padding: 0 15px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/FcJgJ/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, the CSS is much more concise. The heading contains a linear gradient that starts from the top, with color stops right around 50% from the top to create the horizontal line. This technique still requires an extra span with a background color to lie on top, in order to create the illusion of two lines.&lt;/p&gt;

&lt;h2&gt;4: Nested Span and Border&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;span&amp;gt;Title&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
    text-align: center;
    border-bottom: 1px solid #ddd;
    line-height: 0;
    padding: 0;
}

h1 span {
    background: #fff;
    padding: 0 15px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/j9wpH/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method, proposed by CSS Tricks user &lt;a href=&quot;http://www.twitter.com/kevinthompson&quot;&gt;@kevinthompson&lt;/a&gt;, sets the heading&amp;rsquo;s line height to 0 and gives it a border. Once again, a span with a background color is needed. The line height might give you trouble if you have a long title, but this method is short and sweet for titles that are also short and sweet.&lt;/p&gt;

&lt;h2&gt;5: Table Cell and Gradient&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  display: table;
  white-space: nowrap;
  width: 100%;
}

h1:before,
h1:after {
  background-clip: padding;
  background-image: linear-gradient(transparent 49%, #ddd 50%, #ddd 51%, transparent 51%);
  content: &quot;&quot;;
  display: table-cell;
  width: 50%;
}

h1:before {
  border-right: 15px solid transparent;
}

h1:after {
  border-left: 15px solid transparent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/zk27B/1/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method, proposed by CSS Tricks user &lt;a href=&quot;http://www.twitter.com/kevinthompson&quot;&gt;@kevinthompson&lt;/a&gt;, sets the heading&amp;rsquo;s line height to 0 and gives it a border. Once again, a span with a background color is needed. The line height might give you trouble if you have a long title, but this method is short and sweet for titles that are also short and sweet.&lt;/p&gt;

&lt;h2&gt;6: Flexbox&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  display: flex;
  flex-direction: row;
  justify-content: center;
  text-align: center;
}
h1:before, h1:after {
  background-color: #ddd;
  content: &#39;\a0&#39;;
  flex-grow: 1;
  height: 1px;
  position: relative;
  top: 0.5em;
}
h1:before {
  margin-right:10px;
}
h1:after {
  margin-left:10px;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/6PVPB/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The flexbox example was proposed by &lt;a href=&quot;http://www.twitter.com/snookca&quot;&gt;Jonathan Snook&lt;/a&gt;. In it, the heading is defined as a flexbox container with &lt;code&gt;display: flex&lt;/code&gt;. Additionally, the heading&amp;rsquo;s contents flow left to right with &lt;code&gt;flex-direction: row&lt;/code&gt; and are horizontally centered with &lt;code&gt;justify-content: center&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t used the flexbox layout on a project before, you should give it a try—it&amp;rsquo;s pretty neat! Chris Coyier has a &lt;a href=&quot;http://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;helpful guide&lt;/a&gt; to how it works.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;As you can see, there are a ton of ways to achieve this little visual trick, and I&amp;rsquo;ve only covered a few. I&amp;rsquo;m partial to the methods that use less markup, so I can keep my HTML free of extra tags that are used only for presentation. Browser support may vary, so you should pick your poison according to your needs.&lt;/p&gt;

&lt;p&gt;If you have a favorite method, please feel free to share with me on &lt;a href=&quot;https://twitter.com/jessabean&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Sun, 26 Jan 2014 00:00:00 -0500</pubDate>
				<link>http://jessica-eldredge.com//2014/01/26/headings-with-lines/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/01/26/headings-with-lines/</guid>
			</item>
		
			<item>
				<title>Animated Gif Retrieval with Alfred</title>
				<description>&lt;p&gt;An essential part of my daily workflow is quick and easy access to animated GIFs, so I can be ready with a timely and hilarious reaction to any communication with my colleagues. &lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt; and &lt;a href=&quot;https://www.dropbox.com&quot;&gt;Dropbox&lt;/a&gt; make this a breeze.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t already use Alfred, I can&amp;#39;t recommend it enough. It&amp;#39;s one of my most essential apps, and its real value lies in the upgrade to the Powerpack, which allows you to write custom actions called workflows to automate tasks, triggered by a keyword or command.&lt;/p&gt;

&lt;p&gt;The fine folks at Destroy Today wrote a &lt;a href=&quot;http://destroytoday.com/blog/gif-workflow/&quot;&gt;handy Alfred workflow&lt;/a&gt; that searches the GIFs in your Dropbox public folder and copies the URL to your clipboard.&lt;/p&gt;

&lt;p&gt;I decided to modify the workflow a bit, because I organize my GIFs into subdirectories in my public folder. I also wanted to make sure to encode spaces in the URL, because some of my GIF categories have multiple words, like &amp;quot;Table Flip.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/44gfmxti9myqn3p/dropbox-gifs.alfredworkflow&quot;&gt;Download my Alfred workflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;May your coworkers be amazed at your lightning fast GIF reaction skills!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropboxusercontent.com/u/282732/gifs/Table%20Flip/adventuretime_table_flip.gif&quot; alt=&quot;Table Flipping&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 22 Jan 2014 00:00:00 -0500</pubDate>
				<link>http://jessica-eldredge.com//2014/01/22/animated-gifs-with-alfred/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/01/22/animated-gifs-with-alfred/</guid>
			</item>
		
			<item>
				<title>Developing with Yeoman</title>
				<description>&lt;p&gt;I wanted to build a personal site and blog with &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, and decided to develop with &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt;, a workflow that so many people seem to be saying good things about. I had a couple of requirements when I began:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use Yeoman, Grunt, and Bower to generate my assets and manage my development tasks&lt;/li&gt;
&lt;li&gt;Create separate git repositories for my source code and the generated public site&lt;/li&gt;
&lt;li&gt;Manage my repositories with Github&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;To create the skeleton for my site, I decided to use Rob Wierzbowski&amp;#39;s &lt;a href=&quot;https://github.com/robwierzbowski/generator-jekyllrb&quot;&gt;generator-jekyllrb&lt;/a&gt; so I could quickly scaffold a Jekyll site and the appropriate directories.&lt;/p&gt;

&lt;p&gt;The first thing I did was to create a new repository on Github, which I named &lt;code&gt;jessabean_source&lt;/code&gt;. Then I cloned the repository to my computer and navigated into my local copy of &lt;code&gt;jessabean_source&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:jessabean/jessabean_source.git
cd jessabean_source&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once inside the directory, I ran the generator-jekyllrb setup command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yo jekyllrb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I chose the following config options in response to the generator&amp;#39;s prompts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compass for Sass compilation&lt;/li&gt;
&lt;li&gt;Redcarpet for Markdown&lt;/li&gt;
&lt;li&gt;No Pygments (I chose to use Lea Verou&amp;#39;s &lt;a href=&quot;http://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; instead)&lt;/li&gt;
&lt;li&gt;HTML5 Boilerplate&lt;/li&gt;
&lt;li&gt;Autoprefixer: HELL TO THE YES&lt;/li&gt;
&lt;li&gt;Number of blog posts on homepage: 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I didn’t include any posts on my homepage, because I wanted to set my blog up in a subdirectory of my site, and use my index page to feature recent projects instead. More on that in a later post! Generator-jekyllrb created the following structure for my site:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.jekyll&lt;/li&gt;
&lt;li&gt;.tmp&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dist/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node_modules/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;.bowerrc&lt;/li&gt;
&lt;li&gt;.csslintrc&lt;/li&gt;
&lt;li&gt;.editorconfig&lt;/li&gt;
&lt;li&gt;.gitattributes&lt;/li&gt;
&lt;li&gt;.gitignore&lt;/li&gt;
&lt;li&gt;.jshintrc&lt;/li&gt;
&lt;li&gt;_config.build.yml&lt;/li&gt;
&lt;li&gt;_config.yml&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;li&gt;Gemfile&lt;/li&gt;
&lt;li&gt;Gruntfile.js&lt;/li&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can also preview my site for local development by running &lt;code&gt;grunt server&lt;/code&gt; and viewing my site in the browser at http://localhost:9000/&lt;/p&gt;

&lt;h2&gt;Using Bower&lt;/h2&gt;

&lt;p&gt;Bower is an awesome package manager that allows you to manage CSS and Javascript vendor frameworks on your site, as well as choose the version for those frameworks. It’s very similar to RubyGems, but without the back end dependency. Extra sugar: if you don&amp;#39;t care about a particular version of a library, you can specify that you want whatever the latest version is, and Bower will fetch it for you.&lt;/p&gt;

&lt;p&gt;There were a few libraries I knew I’d want for my site. First I needed to include those libraries I wanted for my site in the &lt;code&gt;bower.json&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  &quot;name&quot;: &quot;jessabean-source&quot;,
  &quot;version&quot;: &quot;2.0.0&quot;,
  &quot;dependencies&quot;: {
    &quot;jquery&quot;: &quot;2.0.3&quot;,
    &quot;normalize-css&quot;: &quot;latest&quot;,
    &quot;modernizr&quot;: &quot;latest&quot;,
    &quot;prismjs&quot;: &quot;latest&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed the dependencies with &lt;code&gt;bower install&lt;/code&gt;. Bower installed the specified JS and CSS files into individual directories inside &lt;code&gt;app/_bower_components&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to compile the assets, Grunt requires you to declare those assets inside special comments in your HTML. For example, to include Modernizr, I put this inside the &lt;code&gt;head&lt;/code&gt; tag of my layout file located at &lt;code&gt;app/_layouts/default.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;!-- build:js(app) /js/script.js --&amp;gt;
&amp;lt;script src=&quot;/_bower_components/modernizr/modernizr.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- endbuild --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Git Repository for Source Code&lt;/h2&gt;

&lt;p&gt;Another requirement I had for my site was to create separate repositories for my source code and the generated code. Because reasons.&lt;/p&gt;

&lt;p&gt;All of the source code for my site was already set up in the repository for &lt;code&gt;jessabean_source&lt;/code&gt;. There were just a few more things I wanted to configure. Because the tmp directory, node modules, and bower components are used solely for local development and not needed in production, I add them to my &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app/_bower_components
dist
node_modules
.tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that shows up in my source code repository is the app itself and its accompanying config files. Nice and clean. You can see my source code repository at &lt;a href=&quot;https://github.com/jessabean/jessabean_source&quot;&gt;jessabean_source&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Git Repository for Public Code&lt;/h2&gt;

&lt;p&gt;To create a separate repository for my public site at &lt;a href=&quot;https://github.com/jessabean/jessabean.github.io&quot;&gt;jessabean.github.io&lt;/a&gt;, I first added the &lt;code&gt;dist/&lt;/code&gt; directory to the list of things in my &lt;code&gt;.gitignore&lt;/code&gt;. This directory is where Grunt places the compiled version of my app code, and I didn’t want to include this in my source repository.&lt;/p&gt;

&lt;p&gt;Then, I navigated into the &lt;code&gt;/dist&lt;/code&gt; directory and deleted all of its contents, giving me a clean slate to build the new repository. I then created a repository called &lt;code&gt;jessabean.github.io&lt;/code&gt; at Github, and cloned its contents into my current directory (&lt;code&gt;dist/&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:jessabean/jessabean.github.io.git .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the repository was set up, I needed to add content. To do this, I navigated up one level, back to my source code. I then compiled my app by running &lt;code&gt;grunt build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I could verify that changes had been made to my &lt;code&gt;jessabean.github.io&lt;/code&gt; repository by changing into the &lt;code&gt;dist/&lt;/code&gt; directory and seeing a ton of new files had been generated as unstaged commits.&lt;/p&gt;

&lt;p&gt;All that was left was to wrap everything up into commits, push them up to my repositories, and boom. Website.&lt;/p&gt;

&lt;h2&gt;Takeaways&lt;/h2&gt;

&lt;p&gt;Setup was fairly painless with Yeoman. LiveReload and Autoprefixer are some of my favorite aspects of the generator package--they are really, really handy tools! One thing I would like to investigate further is whether all the grunt tasks included by default under &lt;code&gt;node_modules&lt;/code&gt; are  necessary. I suspect that they&amp;#39;re not, but many of them are interdependent, so trying to delete one led me into a rabbit hole of despair that I quickly decided wasn&amp;#39;t worth it.&lt;/p&gt;

&lt;p&gt;There are other build components I want to explore. For instance, &lt;a href=&quot;http://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; has a Bower component, but I couldn&amp;#39;t figure out how to include the language support at first. I ended up including each of the language files I wanted (located in &lt;code&gt;_bower_components/prismjs/components/&lt;/code&gt;) inside Grunt build comments in my scripts file. But it would be nicer if I could package them up inside of the bower.json file, or maybe build a Grunt task that will combine them all into a minified JS file, like the &lt;a href=&quot;http://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; site&amp;#39;s download page allows me to do.&lt;/p&gt;
</description>
				<pubDate>Sat, 11 Jan 2014 00:00:00 -0500</pubDate>
				<link>http://jessica-eldredge.com//2014/01/11/developing-with-yeoman/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/01/11/developing-with-yeoman/</guid>
			</item>
		
	</channel>
</rss>
