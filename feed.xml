<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Jessica Eldredge</title>
		<description>Web designer/developer, sketchnoter, word nerd</description>
		<link>http://jessica-eldredge.com</link>
		<atom:link href="http://jessica-eldredge.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Create Headings with Lines in CSS</title>
				<description>&lt;p&gt;A popular web design pattern is to include horizontal lines on either side of a line of text, often in a heading. An example of this style is the subheading treatment in Spotify&amp;#39;s &lt;a href=&quot;https://www.spotify.com/us/2013/&quot;&gt;Year in Review&lt;/a&gt;:
&lt;img class=&quot;post-img&quot; src=&quot;/img/assets/2014-01-26/spotify-heading.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;There are many different ways to accomplish this via CSS. Many &lt;a href=&quot;http://css-tricks.com/line-on-sides-headers/&quot;&gt;people&lt;/a&gt; before me have &lt;a href=&quot;http://www.impressivewebs.com/centered-heading-horizontal-line/&quot;&gt;collected examples&lt;/a&gt; for this very issue, but I figured one more couldn&amp;rsquo;t hurt.&lt;/p&gt;

&lt;p&gt;For the purposes of this demonstration, I&amp;rsquo;ve left off the vendor prefixes.&lt;/p&gt;

&lt;h2&gt;1: Pseudo-Elements with Nested Span&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;span&amp;gt;Title&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;h1 {
  position: relative;
  text-align: center;
}

h1 span {
  background: #fff;
  padding: 0 15px;
  position: relative;
  z-index: 1;
}

h1:before {
  background: #ddd;
  content: &quot;&quot;;
  display: block;
  height: 1px;
  position: absolute;
    top: 50%;
  width: 100%;
}

h1:before {
  left: 0;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/daRch/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method uses a pseudo-element to place a 1px high line before the heading. The line takes up 100% of its container. The span then uses a background color and some padding to sit on top of the line, so it &lt;em&gt;looks&lt;/em&gt; like there are two lines on either side of the heading.&lt;/p&gt;

&lt;h2&gt;2: Inline Block Heading with Container&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  display: inline-block;
  padding: 0 15px;
  position: relative;
}

h1:before,
h1:after {
  background: #ddd;
  content: &quot;&quot;;
  display: block;
  height: 1px;
  position: absolute;
    top: 50%;
  width: 400%;
}

h1:before {
  right: 100%;
}

h1:after {
  left: 100%;
}

.container {
  overflow: hidden;
  text-align: center;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/22gHG/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method is similar to #1, with a few small differences. The heading has been set to &lt;code&gt;display: inline-block&lt;/code&gt;, which means it won&amp;rsquo;t take up 100% of its container. That in turn means the pseudo-elements being used for the lines need to be longer if you want them to stretch across the page. I&amp;rsquo;ve used an arbitrary 400% here, but that width would likely need to be adjusted for various container sizes. Lastly, this method assumes you don&amp;rsquo;t mind setting &lt;code&gt;overflow: hidden&lt;/code&gt; on a container around the headings.&lt;/p&gt;

&lt;p&gt;Bonus: This method will work on headings with multiple lines of text.&lt;/p&gt;

&lt;h2&gt;3: Nested Span and Gradient&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;span&amp;gt;Title&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;
h1 {
  background: linear-gradient(top, #fff 0%, #fff 50%, #ddd 50%, #ddd 50.5%, #fff 50.5%, #fff 100%);
}

h1 span {
  background: #fff;
  padding: 0 15px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/FcJgJ/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, the CSS is much more concise. The heading contains a linear gradient that starts from the top, with color stops right around 50% from the top to create the horizontal line. This technique still requires an extra span with a background color to lie on top, in order to create the illusion of two lines.&lt;/p&gt;

&lt;h2&gt;4: Nested Span and Border&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;span&amp;gt;Title&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
    text-align: center;
    border-bottom: 1px solid #ddd;
    line-height: 0;
    padding: 0;
}

h1 span {
    background: #fff;
    padding: 0 15px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/j9wpH/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method, proposed by CSS Tricks user &lt;a href=&quot;http://www.twitter.com/kevinthompson&quot;&gt;@kevinthompson&lt;/a&gt;, sets the heading&amp;rsquo;s line height to 0 and gives it a border. Once again, a span with a background color is needed. The line height might give you trouble if you have a long title, but this method is short and sweet for titles that are also short and sweet.&lt;/p&gt;

&lt;h2&gt;5: Table Cell and Gradient&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  display: table;
  white-space: nowrap;
  width: 100%;
}

h1:before,
h1:after {
  background-clip: padding;
  background-image: linear-gradient(transparent 49%, #ddd 50%, #ddd 51%, transparent 51%);
  content: &quot;&quot;;
  display: table-cell;
  width: 50%;
}

h1:before {
  border-right: 15px solid transparent;
}

h1:after {
  border-left: 15px solid transparent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/zk27B/1/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method, proposed by CSS Tricks user &lt;a href=&quot;http://www.twitter.com/kevinthompson&quot;&gt;@kevinthompson&lt;/a&gt;, sets the heading&amp;rsquo;s line height to 0 and gives it a border. Once again, a span with a background color is needed. The line height might give you trouble if you have a long title, but this method is short and sweet for titles that are also short and sweet.&lt;/p&gt;

&lt;h2&gt;6: Flexbox&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  display: flex;
  flex-direction: row;
  justify-content: center;
  text-align: center;
}
h1:before, h1:after {
  background-color: #ddd;
  content: &#39;\a0&#39;;
  flex-grow: 1;
  height: 1px;
  position: relative;
  top: 0.5em;
}
h1:before {
  margin-right:10px;
}
h1:after {
  margin-left:10px;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/6PVPB/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The flexbox example was proposed by &lt;a href=&quot;http://www.twitter.com/snookca&quot;&gt;Jonathan Snook&lt;/a&gt;. In it, the heading is defined as a flexbox container with &lt;code&gt;display: flex&lt;/code&gt;. Additionally, the heading&amp;rsquo;s contents flow left to right with &lt;code&gt;flex-direction: row&lt;/code&gt; and are horizontally centered with &lt;code&gt;justify-content: center&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t used the flexbox layout on a project before, you should give it a tryâ€”it&amp;rsquo;s pretty neat! Chris Coyier has a &lt;a href=&quot;http://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;helpful guide&lt;/a&gt; to how it works.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;As you can see, there are a ton of ways to achieve this little visual trick, and I&amp;rsquo;ve only covered a few. I&amp;rsquo;m partial to the methods that use less markup, so I can keep my HTML free of extra tags that are used only for presentation. Browser support may vary, so you should pick your poison according to your needs.&lt;/p&gt;

&lt;p&gt;If you have a favorite method, please feel free to share with me on &lt;a href=&quot;https://twitter.com/jessabean&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Sun, 26 Jan 2014 00:00:00 -0500</pubDate>
				<link>http://jessica-eldredge.com//2014/01/26/headings-with-lines/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/01/26/headings-with-lines/</guid>
			</item>
		
			<item>
				<title>Animated Gif Retrieval with Alfred</title>
				<description>&lt;p&gt;An essential part of my daily workflow is quick and easy access to animated GIFs, so I can be ready with a timely and hilarious reaction to any communication with my colleagues. &lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt; and &lt;a href=&quot;https://www.dropbox.com&quot;&gt;Dropbox&lt;/a&gt; make this a breeze.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t already use Alfred, I can&amp;#39;t recommend it enough. It&amp;#39;s one of my most essential apps, and its real value lies in the upgrade to the Powerpack, which allows you to write custom actions called workflows to automate tasks, triggered by a keyword or command.&lt;/p&gt;

&lt;p&gt;The fine folks at Destroy Today wrote a &lt;a href=&quot;http://destroytoday.com/blog/gif-workflow/&quot;&gt;handy Alfred workflow&lt;/a&gt; that searches the GIFs in your Dropbox public folder and copies the URL to your clipboard.&lt;/p&gt;

&lt;p&gt;I decided to modify the workflow a bit, because I organize my GIFs into subdirectories in my public folder. I also wanted to make sure to encode spaces in the URL, because some of my GIF categories have multiple words, like &amp;quot;Table Flip.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/44gfmxti9myqn3p/dropbox-gifs.alfredworkflow&quot;&gt;Download my Alfred workflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;May your coworkers be amazed at your lightning fast GIF reaction skills!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropboxusercontent.com/u/282732/gifs/Table%20Flip/adventuretime_table_flip.gif&quot; alt=&quot;Table Flipping&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 22 Jan 2014 00:00:00 -0500</pubDate>
				<link>http://jessica-eldredge.com//2014/01/22/animated-gifs-with-alfred/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/01/22/animated-gifs-with-alfred/</guid>
			</item>
		
			<item>
				<title>Developing with Yeoman</title>
				<description>&lt;p&gt;I wanted to build a personal site and blog with &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, and decided to develop with &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt;, a workflow that so many people seem to be saying good things about. I had a couple of requirements when I began:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use Yeoman, Grunt, and Bower to generate my assets and manage my development tasks&lt;/li&gt;
&lt;li&gt;Create separate git repositories for my source code and the generated public site&lt;/li&gt;
&lt;li&gt;Manage my repositories with Github&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;To create the skeleton for my site, I decided to use Rob Wierzbowski&amp;#39;s &lt;a href=&quot;https://github.com/robwierzbowski/generator-jekyllrb&quot;&gt;generator-jekyllrb&lt;/a&gt; so I could quickly scaffold a Jekyll site and the appropriate directories.&lt;/p&gt;

&lt;p&gt;The first thing I did was to create a new repository on Github, which I named &lt;code&gt;jessabean_source&lt;/code&gt;. Then I cloned the repository to my computer and navigated into my local copy of &lt;code&gt;jessabean_source&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:jessabean/jessabean_source.git
cd jessabean_source&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once inside the directory, I ran the generator-jekyllrb setup command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yo jekyllrb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I chose the following config options in response to the generator&amp;#39;s prompts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compass for Sass compilation&lt;/li&gt;
&lt;li&gt;Redcarpet for Markdown&lt;/li&gt;
&lt;li&gt;No Pygments (I chose to use Lea Verou&amp;#39;s &lt;a href=&quot;http://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; instead)&lt;/li&gt;
&lt;li&gt;HTML5 Boilerplate&lt;/li&gt;
&lt;li&gt;Autoprefixer: HELL TO THE YES&lt;/li&gt;
&lt;li&gt;Number of blog posts on homepage: 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I didnâ€™t include any posts on my homepage, because I wanted to set my blog up in a subdirectory of my site, and use my index page to feature recent projects instead. More on that in a later post! Generator-jekyllrb created the following structure for my site:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.jekyll&lt;/li&gt;
&lt;li&gt;.tmp&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dist/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node_modules/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;.bowerrc&lt;/li&gt;
&lt;li&gt;.csslintrc&lt;/li&gt;
&lt;li&gt;.editorconfig&lt;/li&gt;
&lt;li&gt;.gitattributes&lt;/li&gt;
&lt;li&gt;.gitignore&lt;/li&gt;
&lt;li&gt;.jshintrc&lt;/li&gt;
&lt;li&gt;_config.build.yml&lt;/li&gt;
&lt;li&gt;_config.yml&lt;/li&gt;
&lt;li&gt;bower.json&lt;/li&gt;
&lt;li&gt;Gemfile&lt;/li&gt;
&lt;li&gt;Gruntfile.js&lt;/li&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can also preview my site for local development by running &lt;code&gt;grunt server&lt;/code&gt; and viewing my site in the browser at http://localhost:9000/&lt;/p&gt;

&lt;h2&gt;Using Bower&lt;/h2&gt;

&lt;p&gt;Bower is an awesome package manager that allows you to manage CSS and Javascript vendor frameworks on your site, as well as choose the version for those frameworks. Itâ€™s very similar to RubyGems, but without the back end dependency. Extra sugar: if you don&amp;#39;t care about a particular version of a library, you can specify that you want whatever the latest version is, and Bower will fetch it for you.&lt;/p&gt;

&lt;p&gt;There were a few libraries I knew Iâ€™d want for my site. First I needed to include those libraries I wanted for my site in the &lt;code&gt;bower.json&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  &quot;name&quot;: &quot;jessabean-source&quot;,
  &quot;version&quot;: &quot;2.0.0&quot;,
  &quot;dependencies&quot;: {
    &quot;jquery&quot;: &quot;2.0.3&quot;,
    &quot;normalize-css&quot;: &quot;latest&quot;,
    &quot;modernizr&quot;: &quot;latest&quot;,
    &quot;prismjs&quot;: &quot;latest&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed the dependencies with &lt;code&gt;bower install&lt;/code&gt;. Bower installed the specified JS and CSS files into individual directories inside &lt;code&gt;app/_bower_components&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to compile the assets, Grunt requires you to declare those assets inside special comments in your HTML. For example, to include Modernizr, I put this inside the &lt;code&gt;head&lt;/code&gt; tag of my layout file located at &lt;code&gt;app/_layouts/default.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;!-- build:js(app) /js/script.js --&amp;gt;
&amp;lt;script src=&quot;/_bower_components/modernizr/modernizr.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- endbuild --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Git Repository for Source Code&lt;/h2&gt;

&lt;p&gt;Another requirement I had for my site was to create separate repositories for my source code and the generated code. Because reasons.&lt;/p&gt;

&lt;p&gt;All of the source code for my site was already set up in the repository for &lt;code&gt;jessabean_source&lt;/code&gt;. There were just a few more things I wanted to configure. Because the tmp directory, node modules, and bower components are used solely for local development and not needed in production, I add them to my &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app/_bower_components
dist
node_modules
.tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that shows up in my source code repository is the app itself and its accompanying config files. Nice and clean. You can see my source code repository at &lt;a href=&quot;https://github.com/jessabean/jessabean_source&quot;&gt;jessabean_source&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Git Repository for Public Code&lt;/h2&gt;

&lt;p&gt;To create a separate repository for my public site at &lt;a href=&quot;https://github.com/jessabean/jessabean.github.io&quot;&gt;jessabean.github.io&lt;/a&gt;, I first added the &lt;code&gt;dist/&lt;/code&gt; directory to the list of things in my &lt;code&gt;.gitignore&lt;/code&gt;. This directory is where Grunt places the compiled version of my app code, and I didnâ€™t want to include this in my source repository.&lt;/p&gt;

&lt;p&gt;Then, I navigated into the &lt;code&gt;/dist&lt;/code&gt; directory and deleted all of its contents, giving me a clean slate to build the new repository. I then created a repository called &lt;code&gt;jessabean.github.io&lt;/code&gt; at Github, and cloned its contents into my current directory (&lt;code&gt;dist/&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:jessabean/jessabean.github.io.git .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the repository was set up, I needed to add content. To do this, I navigated up one level, back to my source code. I then compiled my app by running &lt;code&gt;grunt build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I could verify that changes had been made to my &lt;code&gt;jessabean.github.io&lt;/code&gt; repository by changing into the &lt;code&gt;dist/&lt;/code&gt; directory and seeing a ton of new files had been generated as unstaged commits.&lt;/p&gt;

&lt;p&gt;All that was left was to wrap everything up into commits, push them up to my repositories, and boom. Website.&lt;/p&gt;

&lt;h2&gt;Takeaways&lt;/h2&gt;

&lt;p&gt;Setup was fairly painless with Yeoman. LiveReload and Autoprefixer are some of my favorite aspects of the generator package--they are really, really handy tools! One thing I would like to investigate further is whether all the grunt tasks included by default under &lt;code&gt;node_modules&lt;/code&gt; are  necessary. I suspect that they&amp;#39;re not, but many of them are interdependent, so trying to delete one led me into a rabbit hole of despair that I quickly decided wasn&amp;#39;t worth it.&lt;/p&gt;

&lt;p&gt;There are other build components I want to explore. For instance, &lt;a href=&quot;http://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; has a Bower component, but I couldn&amp;#39;t figure out how to include the language support at first. I ended up including each of the language files I wanted (located in &lt;code&gt;_bower_components/prismjs/components/&lt;/code&gt;) inside Grunt build comments in my scripts file. But it would be nicer if I could package them up inside of the bower.json file, or maybe build a Grunt task that will combine them all into a minified JS file, like the &lt;a href=&quot;http://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; site&amp;#39;s download page allows me to do.&lt;/p&gt;
</description>
				<pubDate>Sat, 11 Jan 2014 00:00:00 -0500</pubDate>
				<link>http://jessica-eldredge.com//2014/01/11/developing-with-yeoman/</link>
				<guid isPermaLink="true">http://jessica-eldredge.com//2014/01/11/developing-with-yeoman/</guid>
			</item>
		
	</channel>
</rss>
